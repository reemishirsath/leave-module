// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/v1/services/user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/reemishirsath/leave-module/models"
	reflect "reflect"
)

// MockUsersService is a mock of UsersService interface
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockUsersService) Login(arg0 context.Context, arg1 models.UserLoginRequest) (models.UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(models.UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUsersServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsersService)(nil).Login), arg0, arg1)
}

// ApplyLeave mocks base method
func (m *MockUsersService) ApplyLeave(ctx context.Context, leave models.Leave) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLeave", ctx, leave)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyLeave indicates an expected call of ApplyLeave
func (mr *MockUsersServiceMockRecorder) ApplyLeave(ctx, leave interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLeave", reflect.TypeOf((*MockUsersService)(nil).ApplyLeave), ctx, leave)
}

// GetLeaves mocks base method
func (m *MockUsersService) GetLeaves(arg0 context.Context, arg1 int) (models.GetAllLeavesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaves", arg0, arg1)
	ret0, _ := ret[0].(models.GetAllLeavesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaves indicates an expected call of GetLeaves
func (mr *MockUsersServiceMockRecorder) GetLeaves(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaves", reflect.TypeOf((*MockUsersService)(nil).GetLeaves), arg0, arg1)
}

// GetLeavesByStatus mocks base method
func (m *MockUsersService) GetLeavesByStatus(arg0 context.Context, arg1 int, arg2 string) (models.GetAllLeavesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeavesByStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.GetAllLeavesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByStatus indicates an expected call of GetLeavesByStatus
func (mr *MockUsersServiceMockRecorder) GetLeavesByStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeavesByStatus", reflect.TypeOf((*MockUsersService)(nil).GetLeavesByStatus), arg0, arg1, arg2)
}
