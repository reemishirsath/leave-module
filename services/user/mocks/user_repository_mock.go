// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/v1/repositories/user_repositories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/reemishirsath/leave-module/models"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockUserRepository) Login(arg0 context.Context, arg1 models.UserLoginRequest) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserRepositoryMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserRepository)(nil).Login), arg0, arg1)
}

// ApplyLeave mocks base method
func (m *MockUserRepository) ApplyLeave(arg0 context.Context, arg1 models.Leave) (models.Leave, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLeave", arg0, arg1)
	ret0, _ := ret[0].(models.Leave)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyLeave indicates an expected call of ApplyLeave
func (mr *MockUserRepositoryMockRecorder) ApplyLeave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLeave", reflect.TypeOf((*MockUserRepository)(nil).ApplyLeave), arg0, arg1)
}

// GetLeaves mocks base method
func (m *MockUserRepository) GetLeaves(arg0 context.Context, arg1 int) (models.GetAllLeavesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaves", arg0, arg1)
	ret0, _ := ret[0].(models.GetAllLeavesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaves indicates an expected call of GetLeaves
func (mr *MockUserRepositoryMockRecorder) GetLeaves(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaves", reflect.TypeOf((*MockUserRepository)(nil).GetLeaves), arg0, arg1)
}

// GetLeavesByStatus mocks base method
func (m *MockUserRepository) GetLeavesByStatus(arg0 context.Context, arg1 int, arg2 string) (models.GetAllLeavesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeavesByStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.GetAllLeavesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesByStatus indicates an expected call of GetLeavesByStatus
func (mr *MockUserRepositoryMockRecorder) GetLeavesByStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeavesByStatus", reflect.TypeOf((*MockUserRepository)(nil).GetLeavesByStatus), arg0, arg1, arg2)
}
